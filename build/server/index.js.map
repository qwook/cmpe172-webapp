{"version":3,"sources":["../../server/index.js"],"names":["MongoStore","require","app","use","json","limit","orm_db","express","process","env","MONGODB_URI","define","db","models","next","User","username","type","unique","password","String","Post","image","Buffer","title","description","price","Number","timestamp","hasOne","reverse","Comment","content","hidden","Boolean","Notification","post","comment","user","req","res","secret","store","driver","static","port","PORT","listen","console","log"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAaC,QAAQ,eAAR,2BAAnB;;AAEA,IAAIC,MAAM,wBAAV;AACAA,IAAIC,GAAJ,CAAQ,qBAAWC,IAAX,CAAgB,EAACC,OAAO,MAAR,EAAhB,CAAR;AACAH,IAAIC,GAAJ,CAAQ,6BAAR;;AAEA,IAAIG,MAAJ;;AAEAJ,IAAIC,GAAJ,CAAQ,cAAII,OAAJ,CAAYC,QAAQC,GAAR,CAAYC,WAAZ,IAA2B,iCAAvC,EAA0E;AAChFC,UAAQ,UAASC,EAAT,EAAaC,MAAb,EAAqBC,IAArB,EAA2B;AACjCR,aAASM,EAAT;;AAEAC,WAAOE,IAAP,GAAcH,GAAGD,MAAH,CAAU,MAAV,EAAkB;AAC9BK,gBAAU,EAACC,MAAM,MAAP,EAAeC,QAAQ,IAAvB,EADoB;AAE9BC,gBAAUC;AAFoB,KAAlB,CAAd;;AAKAP,WAAOQ,IAAP,GAAcT,GAAGD,MAAH,CAAU,MAAV,EAAkB;AAC9BW,aAAOC,MADuB;AAE9BC,aAAOJ,MAFuB;AAG9BK,mBAAaL,MAHiB;AAI9BM,aAAOC,MAJuB;AAK9B;AACAC,iBAAWD;AANmB,KAAlB,CAAd;;AASAd,WAAOQ,IAAP,CAAYQ,MAAZ,CAAmB,MAAnB,EAA2BhB,OAAOE,IAAlC,EAAwC,EAACe,SAAS,OAAV,EAAxC;;AAEAjB,WAAOkB,OAAP,GAAiBnB,GAAGD,MAAH,CAAU,SAAV,EAAqB;AACpC;AACAqB,eAASZ,MAF2B;AAGpC;AACAa,cAAQC,OAJ4B;AAKpC;AACAN,iBAAWD;AANyB,KAArB,CAAjB;;AASAd,WAAOkB,OAAP,CAAeF,MAAf,CAAsB,QAAtB,EAAgChB,OAAOQ,IAAvC,EAA6C,EAACS,SAAS,UAAV,EAA7C;AACAjB,WAAOkB,OAAP,CAAeF,MAAf,CAAsB,MAAtB,EAA8BhB,OAAOE,IAArC;AACAF,WAAOkB,OAAP,CAAeF,MAAf,CAAsB,OAAtB,EAA+BhB,OAAOE,IAAtC;;AAEAF,WAAOsB,YAAP,GAAsBvB,GAAGD,MAAH,CAAU,cAAV,EAA0B;AAC9CyB,YAAMhB,MADwC;AAE9CiB,eAASjB,MAFqC;AAG9CkB,YAAMlB;AAHwC,KAA1B,CAAtB;;AAOA;;AAEAN;AACD;AA3C+E,CAA1E,CAAR;;AA8CAZ,IAAIC,GAAJ,CAAQ,UAACoC,GAAD,EAAMC,GAAN,EAAW1B,IAAX;AAAA,SAAoB,8BAAQ;AAClC2B,YAAQ,YAD0B;AAElCC,WAAO,IAAI1C,UAAJ,CAAe,EAACY,IAAIN,OAAOqC,MAAP,CAAc/B,EAAnB,EAAf;AAF2B,GAAR,EAGzB2B,GAHyB,EAGpBC,GAHoB,EAGf1B,IAHe,CAApB;AAAA,CAAR;;AAKA,mBAAIZ,GAAJ;;AAEAA,IAAIC,GAAJ,CAAQ,GAAR,EAAa,kBAAQyC,MAAR,CAAe,QAAf,CAAb;AACA1C,IAAIC,GAAJ,CAAQ,GAAR,EAAa,kBAAQyC,MAAR,CAAe,OAAf,CAAb;AACA1C,IAAIC,GAAJ,CAAQ,aAAR,EAAuB,kBAAQyC,MAAR,CAAe,kBAAf,CAAvB;AACA1C,IAAIC,GAAJ,CAAQ,IAAR,EAAc,kBAAQyC,MAAR,CAAe,mBAAf,CAAd;;AAEA,IAAMC,OAAOrC,QAAQC,GAAR,CAAYqC,IAAZ,IAAoB,IAAjC;AACA5C,IAAI6C,MAAJ,CAAWF,IAAX;AACAG,QAAQC,GAAR,CAAY,kBAAgBJ,IAAhB,GAAqB,KAAjC","file":"index.js","sourcesContent":["\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport orm from 'orm';\nimport session from 'express-session';\nimport api from './api';\n\nconst MongoStore = require('connect-mongo')(session)\n\nvar app = express();\napp.use(bodyParser.json({limit: '50mb'}));\napp.use(cookieParser());\n\nvar orm_db;\n\napp.use(orm.express(process.env.MONGODB_URI || 'mongodb://localhost/spartanshop', {\n  define: function(db, models, next) {\n    orm_db = db;\n\n    models.User = db.define(\"User\", {\n      username: {type: \"text\", unique: true},\n      password: String\n    });\n\n    models.Post = db.define(\"Post\", {\n      image: Buffer,\n      title: String,\n      description: String,\n      price: Number,\n      // user: String,\n      timestamp: Number\n    });\n\n    models.Post.hasOne('user', models.User, {reverse: 'posts'});\n\n    models.Comment = db.define(\"Comment\", {\n      // parent: String,\n      content: String,\n      // user: String,\n      hidden: Boolean,\n      // reply: String, // Reply to a user\n      timestamp: Number\n    });\n\n    models.Comment.hasOne('parent', models.Post, {reverse: 'comments'});\n    models.Comment.hasOne('user', models.User);\n    models.Comment.hasOne('reply', models.User);\n\n    models.Notification = db.define(\"Notification\", {\n      post: String,\n      comment: String,\n      user: String\n    });\n\n\n    // db.drop(function() {});\n\n    next();\n  }\n}));\n\napp.use((req, res, next) => session({\n  secret: 'huhuhuhuhu',\n  store: new MongoStore({db: orm_db.driver.db})\n})(req, res, next));\n\napi(app);\n\napp.use('/', express.static('public'))\napp.use('/', express.static('build'))\napp.use('/thirdparty', express.static('bower_components'))\napp.use('/*', express.static('public/index.html'))\n\nconst port = process.env.PORT || 8080\napp.listen(port);\nconsole.log(\"Listening on \"+port+\"...\");\n"]}